name: Deploy Turbo Monorepo to Vercel

on:
  push:
    branches:
      - master
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/**'

jobs:
  deploy-nextjs:
    name: Deploy Next.js App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Turbo Repo
        run: pnpm turbo run build --filter=web

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image for Next.js app
        run: |
          docker buildx build -t nextjs-app -f apps/web/Dockerfile .

      - name: Run Vercel Build
        run: npx vercel build --cwd=apps/web

      - name: Deploy Next.js app to Vercel
        run: |
          npx vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN_NEXTJS }} --cwd=apps/web --prod --yes

  # deploy-storybook:
  #   name: Deploy Storybook
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #
  #     - name: Install pnpm
  #       run: |
  #         corepack enable
  #         corepack prepare pnpm@latest --activate
  #
  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Build Turbo Repo
  #       run: pnpm turbo run build --filter=@repo/ui
  #
  #     - name: Build Docker Image
  #       run: docker build -t storybook-ui -f packages/ui/Dockerfile .
  #
  #     - name: Login to Docker Registry
  #       run: echo "${{ secrets.VERCEL_TOKEN }}" | docker login registry.vercel.app -u ${{ secrets.VERCEL_ORG_ID }} --password-stdin
  #
  #     - name: Push Docker Image
  #       run: |
  #         docker tag storybook-ui registry.vercel.app/${{ secrets.VERCEL_ORG_ID }}/ui
  #         docker push registry.vercel.app/${{ secrets.VERCEL_ORG_ID }}/ui
