name: Deploy Turbo Monorepo to Vercel

on:
  push:
    branches:
      - master
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/**'

jobs:
  deploy-nextjs:
    name: Deploy Next.js App with Docker
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Install pnpm
      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      # Step 4: Install Dependencies with pnpm
      - name: Install Dependencies with pnpm
        run: pnpm install --frozen-lockfile

      # Step 5: Pull Vercel Project Settings for the app
      - name: Pull Vercel Project Settings
        run: |
          npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN_NEXTJS }} --cwd=apps/web

      # Step 6: Build Turbo Repo with Turbo (for Next.js app)
      - name: Build Turbo Repo
        run: pnpm turbo run build --filter=web

      # Step 7: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 8: Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 9: Build and Push Docker Image to Vercel Container Registry
      - name: Build and Push Docker Image to Vercel
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --tag vercel/nextjs-app:${{ github.sha }} \
            --output type=registry,ref=vercel/nextjs-app:${{ github.sha }} \
            --build-arg VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID_NEXTJS }} \
            -f apps/web/Dockerfile . 

      # Step 10: Deploy Dockerized App to Vercel
      - name: Deploy Dockerized App to Vercel
        run: |
          npx vercel deploy --prebuilt --token ${{ secrets.VERCEL_TOKEN_NEXTJS }} --cwd=apps/web --prod --yes

  # deploy-storybook:
  #   name: Deploy Storybook
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #
  #     - name: Install pnpm
  #       run: |
  #         corepack enable
  #         corepack prepare pnpm@latest --activate
  #
  #     - name: Install Dependencies
  #       run: pnpm install --frozen-lockfile
  #
  #     - name: Build Turbo Repo
  #       run: pnpm turbo run build --filter=@repo/ui
  #
  #     - name: Build Docker Image
  #       run: docker build -t storybook-ui -f packages/ui/Dockerfile .
  #
  #     - name: Login to Docker Registry
  #       run: echo "${{ secrets.VERCEL_TOKEN }}" | docker login registry.vercel.app -u ${{ secrets.VERCEL_ORG_ID }} --password-stdin
  #
  #     - name: Push Docker Image
  #       run: |
  #         docker tag storybook-ui registry.vercel.app/${{ secrets.VERCEL_ORG_ID }}/ui
  #         docker push registry.vercel.app/${{ secrets.VERCEL_ORG_ID }}/ui
